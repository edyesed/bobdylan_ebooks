#
#  Take twitter email based input, do something, and then respond
# 

service: bobdylanebooks

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: non-linux

provider:
  name: aws
  runtime: python2.7

# you can overwrite defaults here
  stage: dev
  region: us-west-2

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "ses:SendEmail"
        - "ses:SendRawEmail"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "es:*"
      Resource: "arn:aws:es:us-west-2:*:domain/edyesed-ebooks/*"

functions:
  #bobdylan:
  #  # I can only seem to get EMAIL notifications of DMs.. 
  #  environment:
  #    TWITTER_USER: ${env:TWITTER_USER}
  #    TWITTER_CONSUMERKEY: ${env:TWITTER_CONSUMERKEY}
  #    TWITTER_SECRET: ${env:TWITTER_SECRET}
  #    TWITTER_ACCESS_TOKEN: ${env:TWITTER_ACCESS_TOKEN}
  #    TWITTER_ACCESS_TOKEN_SECRET: ${env:TWITTER_ACCESS_TOKEN_SECRET}
  #    ELASTICSEARCH_URL: ${env:ELASTICSEARCH_URL}
  #  handler: respond_to_tweet.responder
  #  events: 
  #    - externalSNS:  ${opt:topicarn}

  regulartweet:
    environment:
      TWITTER_USER: ${env:TWITTER_USER}
      TWITTER_CONSUMERKEY: ${env:TWITTER_CONSUMERKEY}
      TWITTER_SECRET: ${env:TWITTER_SECRET}
      TWITTER_ACCESS_TOKEN: ${env:TWITTER_ACCESS_TOKEN}
      TWITTER_ACCESS_TOKEN_SECRET: ${env:TWITTER_ACCESS_TOKEN_SECRET}
      ELASTICSEARCH_URL: ${env:ELASTICSEARCH_URL}
    handler: regular_tweet.send_tweet
    events:
      - schedule:
          rate: rate(90 minutes)
          enabled: true

  # f'ing weirdo just started getting email on mentions.
  notifications:
    environment:
      TWITTER_USER: ${env:TWITTER_USER}
      TWITTER_CONSUMERKEY: ${env:TWITTER_CONSUMERKEY}
      TWITTER_SECRET: ${env:TWITTER_SECRET}
      TWITTER_ACCESS_TOKEN: ${env:TWITTER_ACCESS_TOKEN}
      TWITTER_ACCESS_TOKEN_SECRET: ${env:TWITTER_ACCESS_TOKEN_SECRET}
      ELASTICSEARCH_URL: ${env:ELASTICSEARCH_URL}
    handler: notifications.respond
    events:
      - schedule:
          rate: rate(5 minutes)
          enabled: true

  # 
  # Well, shit.
  # This was a totally cool idea, but twitter won't let me register 
  # a twilio based number.
  twilio_voice:
    handler: twilio_caller.endpoint
    environment:
      TWITTER_USER: ${env:TWITTER_USER}
      TWITTER_CONSUMERKEY: ${env:TWITTER_CONSUMERKEY}
      TWITTER_SECRET: ${env:TWITTER_SECRET}
      TWITTER_ACCESS_TOKEN: ${env:TWITTER_ACCESS_TOKEN}
      TWITTER_ACCESS_TOKEN_SECRET: ${env:TWITTER_ACCESS_TOKEN_SECRET}
      ELASTICSEARCH_URL: ${env:ELASTICSEARCH_URL}
    events:
      - http:
          path: voice
          method:  post
          integration: lambda
          response:
            headers:
              Content-Type: "'application/xml'"
            template: $input.path('$')
  # 
  twilio_sms:
    handler: twilio_sms.endpoint
    environment:
      TWITTER_USER: ${env:TWITTER_USER}
      TWITTER_CONSUMERKEY: ${env:TWITTER_CONSUMERKEY}
      TWITTER_SECRET: ${env:TWITTER_SECRET}
      TWITTER_ACCESS_TOKEN: ${env:TWITTER_ACCESS_TOKEN}
      TWITTER_ACCESS_TOKEN_SECRET: ${env:TWITTER_ACCESS_TOKEN_SECRET}
      ELASTICSEARCH_URL: ${env:ELASTICSEARCH_URL}
    events:
      - http:
          path: sms
          method:  post
          integration: lambda
          response:
            headers:
              Content-Type: "'application/xml'"
            template: $input.path('$')
